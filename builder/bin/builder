#!/usr/bin/env php
<?php

require __DIR__ . '/../vendor/autoload.php';

use Builder\BuildableTagInterface;
use Builder\Command\CommandBus;
use Builder\Command\SequentialCommandRunner;
use Builder\DependencyTree\NodeInterface;
use Builder\DependencyTree\TreeBuilder;
use Builder\DependentTagInterface;
use Builder\Package\PackageInterface;
use Builder\TagInterface;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Helper\TableRows;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ChoiceQuestion;
use Symfony\Component\Console\Question\ConfirmationQuestion;
use Symfony\Component\Console\Question\Question;
use Symfony\Component\Console\Style\SymfonyStyle;

$app = new Application('Kiboko Docker Builder');

$app->addCommands([
    new class extends Symfony\Component\Console\Command\Command {
        protected function configure()
        {
            $this->setName('build');
            $this->setDescription('Build PHP Docker images');

            $this->addOption('regex', 'x', InputOption::VALUE_REQUIRED);

            $this->addOption('force', 'f', InputOption::VALUE_NONE);
        }

        protected function execute(InputInterface $input, OutputInterface $output)
        {
            /** @var PackageInterface[] $packages */
            $packages = new \CachingIterator(new ArrayIterator(array_merge(
                    require __DIR__ . '/../config/versions.php',
                    require __DIR__ . '/../config/packages.php'
            )), \CachingIterator::FULL_CACHE);
            $format = new SymfonyStyle($input, $output);

            $builder = new TreeBuilder();
            $pattern = $input->getOption('regex');

            /** @var PackageInterface $package */
            foreach ($packages as $package) {
                $builder->build(...$package);
            }

            $nodes = new IteratorIterator($builder);
            if (!empty($pattern)) {
                $nodes = new CallbackFilterIterator($nodes, function (NodeInterface $node) use ($pattern) {
                    return preg_match($pattern, (string)$node) > 0;
                });
            }

            $commandBus = new CommandBus();
            /** @var NodeInterface $node */
            foreach ($builder->resolve(...$nodes) as $node) {
                if ($output->getVerbosity() >= OutputInterface::VERBOSITY_VERBOSE) {
                    $format->writeln(strtr('Found <info>%tagName%</>.', ['%tagName%' => (string)$node]));
                }

                $node->build($commandBus);
            }

            (new SequentialCommandRunner($input, $output->section()))->run($commandBus);

            return 0;
        }
    },

    new class extends Symfony\Component\Console\Command\Command {
        protected function configure()
        {
            $this->setName('wizard');
            $this->setDescription('Build PHP Docker images, with an interactive wizard');

            $this->addOption('force', 'f', InputOption::VALUE_NONE);
        }

        protected function execute(InputInterface $input, OutputInterface $output)
        {
            $format = new SymfonyStyle($input, $output);

            $phpVersion = $format->askQuestion(
                (new ChoiceQuestion('Which PHP version are you using?', ['7.1', '7.2', '7.3', '7.4', '8.0'], '7.2'))
            );

            $application = $format->askQuestion(
                (new ChoiceQuestion('Which application are you using? (leave empty for native image)', ['orocommerce', 'oroplatform', 'orocrm', 'marello', ''], ''))
            );

            $applicationVersion = '';
            if ($application === 'orocommerce') {
                $applicationVersion = $format->askQuestion(
                    (new ChoiceQuestion('Which OroCommerce version are you using?', ['1.6', '3.1', '4.1'], '3.1'))
                );
            } else if ($application === 'oroplatform') {
                $applicationVersion = $format->askQuestion(
                    (new ChoiceQuestion('Which OroPlatform version are you using?', ['2.6', '3.1', '4.1'], '3.1'))
                );
            } else if ($application === 'orocrm') {
                $applicationVersion = $format->askQuestion(
                    (new ChoiceQuestion('Which OroCRM version are you using?', ['2.6', '3.1', '4.1'], '3.1'))
                );
            } else if ($application === 'marello') {
                $applicationVersion = $format->askQuestion(
                    (new ChoiceQuestion('Which Marello version are you using?', ['1.6', '2.0', '2.1', '2.2', '3.0'], '2.2'))
                );
            }

            $enterpriseEdition = false;
            if (!empty($application)) {
                $enterpriseEdition = $format->askQuestion(
                    (new ConfirmationQuestion('Is it for Enterprise Edition?', false))
                );
                $dbms = $format->askQuestion(
                    (new ChoiceQuestion('Which database engine are you using?', ['mysql', 'postgres'], $enterpriseEdition ? 'postgres' : 'mysql'))
                );
            } else {
                $dbms = $format->askQuestion(
                    (new ChoiceQuestion('Which database engine are you using? (leave empty for none)', ['mysql', 'postgres', ''], ''))
                );
            }

            $withBlackfire = $format->askQuestion(
                (new ConfirmationQuestion('Include Blackfire?', false))
            );
            $withXdebug = $format->askQuestion(
                (new ConfirmationQuestion('Include XDebug?', false))
            );

            $format->table(
                ['php', 'application', 'edition', 'version', 'database', 'blackfire', 'xdebug'],
                [[
                    $phpVersion,
                    $application ?: '<native>',
                    !empty($application) ? ($enterpriseEdition ? 'enterprise' : 'community') : '',
                    $applicationVersion,
                    $dbms ?: '<none>',
                    $withBlackfire ? 'yes' : 'no',
                    $withXdebug ? 'yes' : 'no',
                ]]
            );

            if ($withBlackfire && $withXdebug) {
                $variations = '(?:|-blackfire|-xdebug)';
            } else if ($withBlackfire && !$withXdebug) {
                $variations = '(?:|-blackfire)';
            } else if (!$withBlackfire && $withXdebug) {
                $variations = '(?:|-xdebug)';
            } else {
                $variations = '';
            }

            if (empty($application)) {
                if (empty($dbms)) {
                    $pattern = sprintf('/^%s-(?:cli|fpm)%s$/', preg_quote($phpVersion), $variations);
                } else {
                    $pattern = sprintf('/^%s-(?:cli|fpm)%s-%s$/', preg_quote($phpVersion), $variations, $dbms);
                }
            } else {
                $pattern = sprintf('/^%s-(cli|fpm)%s-%s-%s-%s-%s$/', preg_quote($phpVersion), $variations, $application, $enterpriseEdition ? 'ee' : 'ce', preg_quote($applicationVersion), $dbms);
            }

            $format->note(sprintf('Building all images matching the following pattern: %s', $pattern));

            /** @var PackageInterface[] $packages */
            $packages = new \CachingIterator(new ArrayIterator(array_merge(
                require __DIR__ . '/../config/versions.php',
                require __DIR__ . '/../config/packages.php'
            )), \CachingIterator::FULL_CACHE);

            $builder = new TreeBuilder();

            /** @var PackageInterface $package */
            foreach ($packages as $package) {
                $builder->build(...$package);
            }

            $nodes = new IteratorIterator($builder);
            if (!empty($pattern)) {
                $nodes = new CallbackFilterIterator($nodes, function (NodeInterface $node) use ($pattern) {
                    return preg_match($pattern, (string)$node) > 0;
                });
            }

            $commandBus = new CommandBus();
            /** @var NodeInterface $node */
            foreach ($builder->resolve(...$nodes) as $node) {
                if ($output->getVerbosity() >= OutputInterface::VERBOSITY_VERBOSE) {
                    $format->writeln(strtr('Found <info>%tagName%</>.', ['%tagName%' => (string)$node]));
                }

                $node->build($commandBus);
            }

            (new SequentialCommandRunner($input, $output))->run($commandBus);

            return 0;
        }
    },

    new class extends Symfony\Component\Console\Command\Command {
        protected function configure()
        {
            $this->setName('list');
            $this->setDescription('List PHP Docker images');

            $this->addOption('regex', 'x', InputOption::VALUE_REQUIRED);
        }

        protected function execute(InputInterface $input, OutputInterface $output)
        {
            /** @var PackageInterface[] $packages */
            $packages = new \CachingIterator(new ArrayIterator(array_merge(
                require __DIR__ . '/../config/versions.php',
                require __DIR__ . '/../config/packages.php'
            )), \CachingIterator::FULL_CACHE);
            $format = new SymfonyStyle($input, $output);

            $format->table(['tag', 'parent', 'path'], iterator_to_array(new TableRows(function() use ($packages, $input) {
                /** @var PackageInterface $package */
                foreach ($packages as $package) {
                    $tags = new IteratorIterator($package);
                    if (!empty($pattern = $input->getOption('regex'))) {
                        $tags = new CallbackFilterIterator($tags, function (TagInterface $tag) use ($pattern) {
                            return preg_match($pattern, (string)$tag) > 0;
                        });
                    }

                    foreach ($tags as $tag) {
                        yield [
                            'tag' => !empty($pattern) ? preg_replace($pattern, '<comment>\0</>', (string) $tag) : (string) $tag,
                            'parent' => $tag instanceof DependentTagInterface ? $tag->getParent() : null,
                            'path' => $tag instanceof BuildableTagInterface ? $tag->getPath() : null,
                        ];
                    }
                }
            })));

            return 0;
        }
    },

    new class extends Symfony\Component\Console\Command\Command {
        protected function configure()
        {
            $this->setName('tree');
            $this->setDescription('Show PHP Docker images dependency tree');

            $this->addOption('regex', 'x', InputOption::VALUE_REQUIRED);
        }

        protected function execute(InputInterface $input, OutputInterface $output)
        {
            /** @var PackageInterface[] $packages */
            $packages = new \CachingIterator(new ArrayIterator(array_merge(
                require __DIR__ . '/../config/versions.php',
                require __DIR__ . '/../config/packages.php'
            )), \CachingIterator::FULL_CACHE);
            $format = new SymfonyStyle($input, $output);

            $builder = new TreeBuilder();
            $pattern = $input->getOption('regex');

            /** @var PackageInterface $package */
            foreach ($packages as $package) {
                $builder->build(...$package);
            }

            $nodes = new IteratorIterator($builder);
            if (!empty($pattern)) {
                $nodes = new CallbackFilterIterator($nodes, function (NodeInterface $node) use ($pattern) {
                    return preg_match($pattern, (string)$node) > 0;
                });
            }

            $format->writeln('The following tags dependencies does match:');
            foreach ($builder->resolve(...$nodes) as $node) {
                $this->printNode($format, $pattern, $node);
            }

            return 0;
        }

        private function showMatch(?string $pattern, NodeInterface $node): string
        {
            return !empty($pattern) ? preg_replace($pattern, '<comment>\0</>', (string) $node) : (string)$node;
        }

        private function printNode(OutputInterface $output, ?string $pattern, NodeInterface $node, int $level = 0): void
        {
            if ($level === 0) {
                $output->writeln('- ' . $this->showMatch($pattern, $node));
            } else {
                $output->writeln(sprintf('  %2$s> %1$s', $this->showMatch($pattern, $node), str_pad('', ($level * 2), ' ', STR_PAD_LEFT)));
            }

            if (count($node)) {
                foreach ($node as $child) {
                    $this->printNode($output, $pattern, $child, $level + 1);
                }
            }
        }
    },
]);

$app->run(new ArgvInput($argv), new ConsoleOutput());